{"version":3,"sources":["components/Navbar/Search/Search.js","components/Navbar/Navbar.js","components/Container/Movie-list/Movie-Card/Movie-Modal/Modal-Content/ModalContent.js","components/Container/Movie-list/Movie-Card/Movie-Modal/MovieModal.js","components/Container/Movie-list/Movie-Card/MovieCard.js","components/Container/Movie-list/Movielist.js","components/Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","type","placeholder","value","onChange","Navbar","ModalContent","close","onClick","title","release_date","adult","original_language","toUpperCase","overview","vote_average","MovieModal","useState","posterBaseUrl","trigger","poster_path","src","alt","modal","lockScroll","closeOnDocumentClick","MovieCard","key","index","Movielist","Object","keys","results","map","Container","App","React","searchTerm","setSearchTerm","searchResults","setSearchResults","useEffect","axios","then","response","data","prev","event","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gaAIe,SAASA,EAAOC,GAC9B,OACC,yBAAKC,UAAU,UACd,2BACCA,UAAU,eACVC,KAAK,OACLC,YAAY,gBACZC,MAAOJ,EAAMI,MACbC,SAAUL,EAAMK,Y,MCTL,SAASC,EAAON,GAC9B,OACC,yBAAKC,UAAU,UACd,uBAAGA,UAAU,sDAAb,aAGA,kBAACF,EAAD,CAAQK,MAAOJ,EAAMI,MAAOC,SAAUL,EAAMK,Y,MCPhC,SAASE,EAAT,GAAyC,IAAjBP,EAAgB,EAAhBA,MAAOQ,EAAS,EAATA,MAC7C,OACC,yBAAKP,UAAU,SACd,4BAAQA,UAAU,gBAAgBQ,QAASD,GAA3C,QAGA,yBAAKP,UAAU,eACd,uBAAGA,UAAU,gBAAgBD,EAAMU,OACnC,6BACA,uBAAGT,UAAU,mBAAb,iBACgBD,EAAMW,cAGrBX,EAAMY,OACN,uBAAGX,UAAU,mBAAb,yBAECD,EAAMY,OACP,uBAAGX,UAAU,mBAAb,wBAGD,uBAAGA,UAAU,mBAAb,sBACqBD,EAAMa,kBAAkBC,eAE7C,6BACA,uBAAGb,UAAU,mBAAb,aAEA,uBAAGA,UAAU,iBAAiBD,EAAMe,UACpC,6BACA,uBAAGd,UAAU,iCAAb,iBACgBD,EAAMgB,cAEtB,6BACA,4BACCf,UAAU,gBACVQ,QAAS,WACRD,MAHF,SAQA,+B,MCtCW,SAASS,EAAWjB,GAAQ,IAAD,EACjBkB,mBAAS,mCAA1BC,EADkC,oBAIzC,OACC,kBAAC,IAAD,CACCC,QACC,4BAAQnB,UAAU,gBAChBD,EAAMA,MAAMqB,aACZ,yBACCC,IAAKH,EAAgBnB,EAAMA,MAAMqB,YACjCE,IAAK,cAGP,uBAAGtB,UAAU,eAAeD,EAAMA,MAAMU,QAG1Cc,OAAK,EACLC,YAAY,EACZC,sBAAoB,IAGnB,SAAClB,GAAD,OAAW,kBAACD,EAAD,CAAcP,MAAOA,EAAMA,MAAOQ,MAAOA,O,MCvBzC,SAASmB,EAAU3B,GAGjC,OACC,wBAAI4B,IAAK5B,EAAM6B,MAAO5B,UAAU,aAC/B,kBAACgB,EAAD,CAAYjB,MAAOA,EAAMI,S,MCLb,SAAS0B,EAAU9B,GACjC,OACC,4BACE+B,OAAOC,KAAKhC,EAAMI,MAAM6B,SAASC,KAAI,SAACN,GAAD,OACrC,kBAACD,EAAD,CACCC,IAAKA,EACLC,MAAOD,EACPxB,MAAOJ,EAAMI,MAAM6B,QAAQL,S,MCNjB,SAASO,EAAUnC,GACjC,OACC,yBAAKC,UAAU,aACd,kBAAC,EAAD,CAAWG,MAAOJ,EAAMI,S,MCGZ,SAASgC,IAAO,IAAD,EACOC,IAAMnB,SAAS,IADtB,mBACtBoB,EADsB,KACVC,EADU,OAGaF,IAAMnB,SAAS,CACxDe,QAAS,KAJmB,mBAGtBO,EAHsB,KAGPC,EAHO,KAsB7B,OAVAJ,IAAMK,WAAU,WACfC,IAfD,6FAegC,KAAfL,EAAoB,IAAMA,IACxCM,MAAK,SAACC,GAAD,OAAcA,KACnBD,MAAK,SAACE,GACNL,GAAiB,SAACM,GACjB,OAAO,2BAAKA,GAAZ,IAAkBd,QAASa,EAAKA,KAAKb,kBAGtC,CAACK,IAGH,yBAAKrC,UAAU,OACd,kBAACK,EAAD,CAAQF,MAAOkC,EAAYjC,SAjBR,SAAC2C,GACrBT,EAAcS,EAAMC,OAAO7C,UAiB1B,kBAAC+B,EAAD,CAAW/B,MAAOoC,KCvBDU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACrB,EAAD,OAEFsB,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.918d6535.chunk.js","sourcesContent":["import React from 'react'\r\nimport Popup from 'reactjs-popup'\r\nimport './css/search.style.min.css'\r\n\r\nexport default function Search(props) {\r\n\treturn (\r\n\t\t<div className='search'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='search-field'\r\n\t\t\t\ttype='text'\r\n\t\t\t\tplaceholder='Search Movies'\r\n\t\t\t\tvalue={props.value}\r\n\t\t\t\tonChange={props.onChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport Search from './Search/Search'\r\nimport './css/Navbar.style.min.css'\r\nexport default function Navbar(props) {\r\n\treturn (\r\n\t\t<div className='navbar'>\r\n\t\t\t<p className='navbar-title animate__animated animate__zoomInDown'>\r\n\t\t\t\tMovie CMS\r\n\t\t\t</p>\r\n\t\t\t<Search value={props.value} onChange={props.onChange} />\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport './css/modalcontent.style.min.css'\r\nexport default function ModalContent({ props, close }) {\r\n\treturn (\r\n\t\t<div className='modal'>\r\n\t\t\t<button className='modal-button1' onClick={close}>\r\n\t\t\t\t&times;\r\n\t\t\t</button>\r\n\t\t\t<div className='modal-block'>\r\n\t\t\t\t<p className='modal-header'>{props.title}</p>\r\n\t\t\t\t<br />\r\n\t\t\t\t<p className='modal-font-size'>\r\n\t\t\t\t\tRelease date: {props.release_date}\r\n\t\t\t\t</p>\r\n\r\n\t\t\t\t{props.adult && (\r\n\t\t\t\t\t<p className='modal-font-size'>Category: Adult Only</p>\r\n\t\t\t\t)}\r\n\t\t\t\t{!props.adult && (\r\n\t\t\t\t\t<p className='modal-font-size'>Category: All public</p>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t<p className='modal-font-size'>\r\n\t\t\t\t\tOriginal Language: {props.original_language.toUpperCase()}\r\n\t\t\t\t</p>\r\n\t\t\t\t<br />\r\n\t\t\t\t<p className='modal-font-size'>Overview:</p>\r\n\r\n\t\t\t\t<p className='modal-content'>{props.overview}</p>\r\n\t\t\t\t<br />\r\n\t\t\t\t<p className='modal-average modal-font-size'>\r\n\t\t\t\t\tVote average: {props.vote_average}\r\n\t\t\t\t</p>\r\n\t\t\t\t<br />\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName='modal-button2'\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tclose()\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tClose\r\n\t\t\t\t</button>\r\n\t\t\t\t<br />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React, { useState } from 'react'\r\nimport Popup from 'reactjs-popup'\r\nimport ModalContent from './Modal-Content/ModalContent'\r\nimport './css/moviemodal.style.min.css'\r\nexport default function MovieModal(props) {\r\n\tconst [posterBaseUrl] = useState(' http://image.tmdb.org/t/p/w185')\r\n\t// console.log(props.props)\r\n\r\n\treturn (\r\n\t\t<Popup\r\n\t\t\ttrigger={\r\n\t\t\t\t<button className='modal-button'>\r\n\t\t\t\t\t{props.props.poster_path && (\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tsrc={posterBaseUrl + props.props.poster_path}\r\n\t\t\t\t\t\t\talt={'not found'}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<p className='modal-title'>{props.props.title}</p>\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t\tmodal\r\n\t\t\tlockScroll={true}\r\n\t\t\tcloseOnDocumentClick\r\n\t\t>\r\n\t\t\t{/*Modal content*/}\r\n\t\t\t{(close) => <ModalContent props={props.props} close={close} />}\r\n\t\t</Popup>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport MovieModal from './Movie-Modal/MovieModal'\r\nimport './css/moviecard.style.min.css'\r\nexport default function MovieCard(props) {\r\n\t// console.log(props.value)\r\n\r\n\treturn (\r\n\t\t<li key={props.index} className='moviecard'>\r\n\t\t\t<MovieModal props={props.value} />\r\n\t\t</li>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport MovieCard from './Movie-Card/MovieCard'\r\nimport './css/movielist.style.min.css'\r\nexport default function Movielist(props) {\r\n\treturn (\r\n\t\t<ul>\r\n\t\t\t{Object.keys(props.value.results).map((key) => (\r\n\t\t\t\t<MovieCard\r\n\t\t\t\t\tkey={key}\r\n\t\t\t\t\tindex={key}\r\n\t\t\t\t\tvalue={props.value.results[key]}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</ul>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport MovieList from './Movie-list/Movielist'\r\nimport './css/container.style.min.css'\r\n\r\nexport default function Container(props) {\r\n\treturn (\r\n\t\t<div className='container'>\r\n\t\t\t<MovieList value={props.value} />\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react'\nimport axios from 'axios'\nimport Navbar from './components/Navbar/Navbar'\n// import Search from './components/Navbar/Search/Search'\nimport Container from './components/Container/Container'\nimport './css/app.style.min.css'\n\nconst apiurl =\n\t'https://api.themoviedb.org/3/search/movie?api_key=07a61de5b731a869bc9cec8e25d2c8a8&query='\n\nexport default function App() {\n\tconst [searchTerm, setSearchTerm] = React.useState('')\n\n\tconst [searchResults, setSearchResults] = React.useState({\n\t\tresults: {},\n\t})\n\n\tconst handleChange = (event) => {\n\t\tsetSearchTerm(event.target.value)\n\t\t// console.log(event.target.value)\n\t}\n\n\tReact.useEffect(() => {\n\t\taxios(apiurl + (searchTerm === '' ? 'a' : searchTerm))\n\t\t\t.then((response) => response)\n\t\t\t.then((data) => {\n\t\t\t\tsetSearchResults((prev) => {\n\t\t\t\t\treturn { ...prev, results: data.data.results }\n\t\t\t\t})\n\t\t\t})\n\t}, [searchTerm])\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Navbar value={searchTerm} onChange={handleChange} />\n\t\t\t<Container value={searchResults} />\n\t\t</div>\n\t)\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}